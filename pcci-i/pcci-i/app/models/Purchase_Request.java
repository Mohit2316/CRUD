package models;




import play.data.validation.Constraints.Required;
import play.db.ebean.Model;
import controllers.*;
import java.sql.*;
import java.lang.*;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.System;
import java.util.*;
import java.text.*;
import java.util.Calendar;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import javax.persistence.*;

@Entity
@SuppressWarnings("serial")
public class Purchase_Request extends Model{

	@Id
    @Column(name="id")
	public Long key;

    @Version
    private int version;

    public Integer cost_Center_Number;


    public String cost_Center_Name;


    public String requisition_type;

    public String asset_category;

    public String acc_category;

    public String asset_tag;

    public Float cost_estimate;

    public Float source_estimate;

    public java.sql.Date requested_delivery_date;

    public String detailed_item;

    public Integer  quantity;

    public String vendor_name;

    public String reqId;

    public String approver;

    public String po_number;

    public String vp_signature;

    public String vp_typed_name;

    public Date date_sig_vp;

    public String software_approver_signature_1;

    public Date date_sign_software_1;

    public String software_approver_signature_2;

    public Date date_sign_software_2;

    public Date created_at;

    public Date updated_at;

    public Date approved_at;

    public Date processed_at;

    public String comment_Financer_reject;

    public String comment_Financer_accept;

    public String comment_Approver_rejct;

    public String comment_Approver_accept;

    public String payment_method;

    public String fileID;

    public Integer status;

    public Integer  request_status;

    @Column(name="approver_id")
    public Long id_approver;


    public String notes;



    @ManyToOne
    public User user;

    public Long getUserId() {
        return user.getKey();
    }

    public boolean ifComment(Long id) {
        Comment pr = new Comment();
        List<Comment> li = pr.submitted_comments(id);
        return !li.isEmpty();
    }

    public String getApprover(){

        if(User.find.byId(this.id_approver)!=null){
            return User.find.byId(this.id_approver).name;
        }
           return null;

    }







    public Long getKey(){
        return key;
    }

    public String getPo_number(){
        return this.po_number;
    }

    public void setPo_number(){
        String longKey = Long.toString(this.key);
        this.po_number = "PO-"+longKey;
    }

//    public void setPo_number(){
//        System.out.println("THE STRING IS "+"po_"+Long.toString(this.key));
//       this.po_number = "po_"+Long.toString(this.key);
//        save(); //Save the autogenerated po number
//    }

    public String getCreated_at(){
        return dateFormat(this.created_at);
    }

    public String getUpdated_at(){
        if(this.updated_at!=null){
            return dateFormat(this.updated_at);
        }
        else{
            return dateFormat(this.created_at);
        }

    }

    public String getApproved_at(){
        if(this.approved_at!=null){
            return dateFormat(this.approved_at);
        }
        else{
            return "Not Approved Yet";
        }

    }

    public String getProcessed_at(){
        if(this.processed_at!=null){
            return dateFormat(this.processed_at);
        }
        else{
            return "Not Processed Yet";
        }

    }

    public String getStatus(){
        switch(this.status){
            case 0: return "Submitted";
            case 1: return "Approved";
            case 2: return "Processed";
            case 3: return "Rejected by approver";
            case 4: return "Rejected by financer";
            default:return null;
        }
    }

    public String dateFormat(Date date){ //For showing Time In UTC

        DateFormat utcFormat = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
        TimeZone utcTime = TimeZone.getTimeZone("UTC");
        utcFormat.setTimeZone(utcTime);
        if(date!=null){
            return utcFormat.format(date);

        }
        return null;
    }


    public String getRequested_date(){ //For showing Time In mm/dd/yyyy format

    if(this.requested_delivery_date!=null){
        DateFormat newFormat = new SimpleDateFormat("MM/dd/yyyy");
        return newFormat.format(this.requested_delivery_date);

    }
        return null;

    }

    public String getDate_sig_vp(){

        if(this.date_sig_vp!=null){
            return dateFormat(this.date_sig_vp);

        }
        return null;

    }

    public String getDate_sign_software_1(){ //For showing Time In UTC

        if(this.date_sign_software_1!=null){
            return dateFormat(this.date_sign_software_1);

        }
        return null;

    }

    public String getDate_sign_software_2(){ //For showing Time In UTC

        if(this.date_sign_software_2!=null){
            return dateFormat(this.date_sign_software_2);

        }
        return null;

    }

    public Boolean showUpdateButton(Long id,String loggedInUser){
        /*Update can be done by approver or normal user
        to their own respective forms
        */
        BaseAuthenticatedController superController = new BaseAuthenticatedController();
        System.out.println("THE USER IN CONTEXT IS" + superController.getUser().getKey());
        Purchase_Request requestForm = Purchase_Request.find.byId(id);
        Long keyId = requestForm.user.getKey();
        if((loggedInUser=="normal" || loggedInUser=="approver") && (requestForm.status==0 || requestForm.status==3 || requestForm.status==4) && superController.getUser()!=null){
            System.out.println("the id is "+requestForm.user.getKey());
            return requestForm.user.getKey()==superController.getUser().getKey();

        }
        return false;
    }

    public Boolean showApproveButton(Long id,String loggedInUser){
        BaseAuthenticatedController superController = new BaseAuthenticatedController();
        System.out.println("THE USER IN CONTEXT IS" + superController.getUser().userName);
        Purchase_Request requestForm = Purchase_Request.find.byId(id);
//      Long keyId = requestForm.user.getKey();
        if((loggedInUser=="approver") && (requestForm.status==0 || requestForm.status==3 || requestForm.status==4) && superController.getUser()!=null){

            return requestForm.user.approver_id==superController.getUser().getKey();

        }
        return false;

    }

    public Boolean showDisApproveButton(Long id,String loggedInUser){
        BaseAuthenticatedController superController = new BaseAuthenticatedController();
        System.out.println("THE USER IN CONTEXT IS" + superController.getUser().userName);
        Purchase_Request requestForm = Purchase_Request.find.byId(id);
//      Long keyId = requestForm.user.getKey();
        if((loggedInUser=="approver") && (requestForm.status==1 || requestForm.status==0) && superController.getUser()!=null){

            return requestForm.user.approver_id==superController.getUser().getKey();

        }
        return false;

    }

    public Boolean showApproverCommentButton(Long id,String loggedInUser){
        BaseAuthenticatedController superController = new BaseAuthenticatedController();
        System.out.println("THE USER IN CONTEXT IS" + superController.getUser().userName);
        Purchase_Request requestForm = Purchase_Request.find.byId(id);
//      Long keyId = requestForm.user.getKey();
        if((loggedInUser=="approver") && (requestForm.status==1 || requestForm.status==0) && superController.getUser()!=null){
            return requestForm.user.approver_id==superController.getUser().getKey();
        }
        return false;
    }

    public Boolean showProcessButton(Long id,String loggedInUser){
//        BaseAuthenticatedController superController = new BaseAuthenticatedController();
//        System.out.println("THE USER IN CONTEXT IS" + superController.getUser().userName);
        Purchase_Request requestForm = Purchase_Request.find.byId(id);
//      Long keyId = requestForm.user.getKey();
        if((loggedInUser=="financer") && (requestForm.status==1)){

            return true;

        }
        return false;

    }

//    public Boolean showUnProcessButton(Long id,String loggedInUser){
////        BaseAuthenticatedController superController = new BaseAuthenticatedController();
////        System.out.println("THE USER IN CONTEXT IS" + superController.getUser().userName);
//        Purchase_Request requestForm = Purchase_Request.find.byId(id);
////      Long keyId = requestForm.user.getKey();
//        if((loggedInUser=="financer") && (requestForm.status==1)){
//
//            return true;
//
//        }
//        return false;
//
//    }

//    @Override
//    public String toString() {
//        return  "{"+
//                " costNumber:'" + cost_Center_Number+'\''+
//                " , costCenterName:'"+cost_Center_Name+'\''+
//                " , requistionType:'"+requisition_type+'\''+
//                " , assetTag:'"+asset_tag+'\''+
//                " , costEstimate:'"+cost_estimate+'\''+
//                " , sourceEstimate:'"+source_estimate+'\''+
//                " , requestedDeliveryDate:'"+requested_delivery_date+'\''+
//                " , detailedItem:'"+detailed_item+'\''+
//                " , quantity:'"+quantity+'\''+
//                " , vendorName:'"+vendor_name+'\''+
//                " , requestId:'"+reqId+'\''+
//                " , approver:'"+approver+'\''+
//                " , poNumber:'"+po_number+'\''+
//                "}";
//    }


    public static Model.Finder<Long,Purchase_Request> find = new Model.Finder<Long,Purchase_Request>(
            Long.class, Purchase_Request.class
    );






}
